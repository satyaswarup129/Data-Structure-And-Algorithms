class Solution {
  public:
    // Function to serialize a tree and return a list containing nodes of tree.
   
    vector<int> serialize(Node *root) {
        // Your code 
        vector<int>ans;
        if(root==NULL) return ans;
        queue<Node*>q;
        q.push(root);
        while(q.size()>0){
            auto node=q.front();
            q.pop();
            if(node==NULL){
                ans.push_back(-1);
            }
            else{
                ans.push_back(node->data);
                q.push(node->left);
                q.push(node->right);
            }
        }
        // for(auto it:ans){
        //     cout<<it<<" ";
        // }
        return ans;
    }
 

    // Function to deserialize a list and construct the tree.
    Node *deSerialize(vector<int> &arr) {
        // Your code here
        if(arr.size()==0) return NULL;
        int i=1;
        Node*root=new Node(arr[0]);
        queue<Node*>Q;
        Q.push(root);
        while(Q.size()>0&&i<arr.size()){
            Node*curr=Q.front();
            Q.pop();
            if(arr[i]!=-1){
                curr->left=new Node(arr[i]);
                Q.push(curr->left);
            }
            i++;
            if(i<arr.size()&&arr[i]!=-1){
                curr->right=new Node(arr[i]);
                Q.push(curr->right);
            }
            i++;
        }
        return root;
        

    }
};
