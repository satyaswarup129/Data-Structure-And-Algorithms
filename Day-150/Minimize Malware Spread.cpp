class Solution {
public:
    vector<int> parent, sz;

    int find_set(int x){
        if(parent[x] == x) return x;
        return parent[x] = find_set(parent[x]);
    }

    void make_union(int x, int y){
        int a = find_set(x);
        int b = find_set(y);
        if(a != b){
            if(sz[a] < sz[b]) swap(a, b);
            parent[b] = a;
            sz[a] += sz[b];
        }
    }

    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        parent.resize(n);
        sz.resize(n);

        for(int i = 0; i<n; i++){
            parent[i] = i;
            sz[i] = 1;
        }

        for(int i = 0; i<n; i++){
            for(int j = 0; j<n; j++){
                if(graph[i][j] == 1){
                    make_union(i, j);
                }
            }
        }

        vector<int> infected(n, 0);
        for(auto it : initial){
            int x = find_set(it);
            infected[x]++;
        } 

        int ans = -1;
        int maxsize = -1;
        for(auto it : initial){
            int x = find_set(it);
            if(infected[x] == 1 && maxsize <= sz[x]){
                if(maxsize == sz[x]) {
                    ans = min(ans, it);
                }
                else ans = it;
                maxsize = sz[x];
            }
        }

        if(ans == -1){
            int minval = n+1;
            for(auto it : initial){
               minval = min(it, minval);
            }
            return minval;
        }

        return ans;
    }
};
